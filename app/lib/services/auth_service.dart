import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class AuthService {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  String? _verificationId;

  // Get current user
  User? get currentUser => _auth.currentUser;

  // Get auth state changes stream
  Stream<User?> get authStateChanges => _auth.authStateChanges();

  // Send OTP to phone number
  Future<void> sendOTP(String phoneNumber) async {
    try {
      await _auth.verifyPhoneNumber(
        phoneNumber: phoneNumber,
        verificationCompleted: (PhoneAuthCredential credential) async {
          // Auto-verification completed
          await _auth.signInWithCredential(credential);
        },
        verificationFailed: (FirebaseAuthException e) {
          print('‚ùå OTP verification failed: ${e.message}');
          throw Exception('‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á OTP ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${e.message}');
        },
        codeSent: (String verificationId, int? resendToken) {
          _verificationId = verificationId;
          print('üì± OTP sent to: $phoneNumber');
        },
        codeAutoRetrievalTimeout: (String verificationId) {
          _verificationId = verificationId;
        },
        timeout: const Duration(seconds: 60),
      );
    } catch (e) {
      print('‚ùå Error sending OTP: $e');
      throw Exception('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á OTP ‡πÑ‡∏î‡πâ: ${e.toString()}');
    }
  }

  // Verify OTP code
  Future<UserCredential> verifyOTP(String otpCode) async {
    try {
      if (_verificationId == null) {
        throw Exception('‡πÑ‡∏°‡πà‡∏û‡∏ö verification ID ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á OTP ‡πÉ‡∏´‡∏°‡πà');
      }

      final credential = PhoneAuthProvider.credential(
        verificationId: _verificationId!,
        smsCode: otpCode,
      );

      final userCredential = await _auth.signInWithCredential(credential);
      print('‚úÖ OTP verification successful');
      return userCredential;
    } catch (e) {
      print('‚ùå OTP verification failed: $e');
      throw Exception('‡∏£‡∏´‡∏±‡∏™ OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${e.toString()}');
    }
  }

  // Sign out
  Future<void> signOut() async {
    try {
      await _auth.signOut();
      print('‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (e) {
      print('‚ùå Error signing out: $e');
      throw Exception('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ: ${e.toString()}');
    }
  }

  // Check if phone number exists in Firebase
  Future<bool> checkPhoneNumberExists(String phoneNumber) async {
    try {
      final querySnapshot = await _firestore
          .collection('users')
          .where('phoneNumber', isEqualTo: phoneNumber)
          .limit(1)
          .get()
          .timeout(const Duration(milliseconds: 1500));
      
      final exists = querySnapshot.docs.isNotEmpty;
      print('üìû Phone number check: $phoneNumber - ${exists ? 'exists' : 'not found'}');
      return exists;
    } catch (e) {
      print('‚ùå Error checking phone number: $e');
      return false;
    }
  }

  // Save new phone number to Firebase
  Future<void> savePhoneNumber(String phoneNumber) async {
    try {
      await _firestore.collection('users').add({
        'phoneNumber': phoneNumber,
        'createdAt': FieldValue.serverTimestamp(),
        'isActive': true,
        'lastLogin': FieldValue.serverTimestamp(),
        'userType': 'new_user',
      });
      print('üíæ Phone number saved: $phoneNumber');
    } catch (e) {
      print('‚ùå Error saving phone number: $e');
      throw Exception('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÑ‡∏î‡πâ: ${e.toString()}');
    }
  }

  // Sign in with email (Firebase authentication)
  Future<UserCredential> signInWithEmail(String email, String password) async {
    try {
      final userCredential = await _auth.signInWithEmailAndPassword(
        email: email,
        password: password,
      ).timeout(const Duration(seconds: 2));
      print('‚úÖ Email login successful for: $email');
      return userCredential;
    } catch (e) {
      print('‚ùå Email login failed: $e');
      throw Exception('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ: ${e.toString()}');
    }
  }

  // Save email to Firebase
  Future<void> saveEmailToFirebase(String email) async {
    try {
      await _firestore.collection('users').add({
        'email': email,
        'createdAt': FieldValue.serverTimestamp(),
        'isActive': true,
        'userType': 'email_user',
      });
      print('‚úÖ Email saved to Firebase: $email');
    } catch (e) {
      print('‚ùå Error saving email: $e');
      throw Exception('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏î‡πâ: ${e.toString()}');
    }
  }

  // Create account with email (Firebase authentication) - Optimized for speed
  Future<UserCredential> createAccountWithEmail(
    String email,
    String password,
    String firstName,
    String lastName,
    String phoneNumber,
  ) async {
    try {
      // Create user with ultra-fast timeout
      final userCredential = await _auth.createUserWithEmailAndPassword(
        email: email,
        password: password,
      ).timeout(const Duration(milliseconds: 1500)); // 1.5 second timeout

      // Update user profile (async, don't wait)
      userCredential.user?.updateDisplayName('$firstName $lastName');
      
      // Save additional user data to Firestore (async, don't wait)
      _firestore.collection('users').doc(userCredential.user!.uid).set({
        'email': email,
        'firstName': firstName,
        'lastName': lastName,
        'phoneNumber': phoneNumber,
        'displayName': '$firstName $lastName',
        'createdAt': FieldValue.serverTimestamp(),
        'isActive': true,
        'userType': 'registered_user',
      });

      print('‚úÖ Account creation successful for: $email');
      print('üìù User details: $firstName $lastName, Phone: $phoneNumber');
      return userCredential;
    } catch (e) {
      print('‚ùå Account creation failed: $e');
      throw Exception('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏î‡πâ: ${e.toString()}');
    }
  }
}